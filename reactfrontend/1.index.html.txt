1.index.html 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enter Salary</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h2>Enter Your Salary</h2>
        <div class="input-group">
            <input type="number" id="salary" placeholder="Enter salary amount">
        </div>
        <button onclick="saveSalary()">Next</button>
    </div>
    <script src="script.js"></script>
</body>
</html>


2.budget.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Budget Allocation</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body onload="loadBudgetPage()">
    <div class="container">
        <h2>Budget Allocation</h2>
        <p>Salary: ₹<span id="displaySalary">0</span></p>

        <h3>Allocated Expenses</h3>
        <ul id="expenseList"></ul>

        <div class="input-group">
            <input type="text" id="newExpenseName" placeholder="Expense Name">
            <input type="number" id="newExpenseAmount" placeholder="Amount">
            <button onclick="addExpense()">Add Expense</button>
        </div>
        
        <p><strong>Remaining Balance: ₹<span id="remainingBalance">0</span></strong></p>
        
        <button onclick="goToChart()">Next</button>
    </div>
    <script src="script.js"></script>
</body>
</html>

3.chart.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Budget Visualization</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body onload="loadChartPage()">
    <div class="container">
        <h2>Budget Analysis</h2>
        <canvas id="expenseChart"></canvas>
        <button onclick="goBack()">Go Back</button>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="script.js"></script>
</body>
</html>

4.styles.css

body { font-family: Arial, sans-serif; margin: 20px; padding: 20px; text-align: center; }
.container { max-width: 500px; margin: auto; }
.input-group { margin-bottom: 15px; }
button { padding: 10px 15px; background-color: #28a745; color: white; border: none; cursor: pointer; }
ul { list-style: none; padding: 0; }
li { margin: 5px 0; }
.chart-container { width: 100%; height: 300px; }

5.script.js

function saveSalary() {
    let salary = parseFloat(document.getElementById("salary").value) || 0;
    localStorage.setItem("salary", salary);
    location.href = "budget.html";
}

function loadBudgetPage() {
    let salary = parseFloat(localStorage.getItem("salary")) || 0;
    document.getElementById("displaySalary").innerText = `₹${salary}`;

    let expenseList = document.getElementById("expenseList");
    expenseList.innerHTML = "";

    let defaultExpenses = [
        { name: "Rent/Loan", percent: 30 },
        { name: "Groceries", percent: 15 },
        { name: "Savings", percent: 20 },
        { name: "Entertainment", percent: 10 }
    ];

    let totalAllocated = 0;
    defaultExpenses.forEach(exp => {
        let amount = (salary * exp.percent) / 100;
        totalAllocated += amount;
        let listItem = document.createElement("li");
        listItem.innerText = `${exp.name}: ₹${amount.toFixed(2)}`;
        listItem.setAttribute("data-name", exp.name);
        listItem.setAttribute("data-amount", amount.toFixed(2));
        expenseList.appendChild(listItem);
    });

    let remainingBalance = salary - totalAllocated;
    document.getElementById("remainingBalance").innerText = `₹${remainingBalance.toFixed(2)}`;

    localStorage.setItem("totalExpenses", totalAllocated.toFixed(2));
}

function addExpense() {
    let name = document.getElementById("newExpenseName").value;
    let amount = parseFloat(document.getElementById("newExpenseAmount").value) || 0;
    
    if (name && amount) {
        let expenseList = document.getElementById("expenseList");
        let listItem = document.createElement("li");
        listItem.innerText = `${name}: ₹${amount}`;
        listItem.setAttribute("data-name", name);
        listItem.setAttribute("data-amount", amount);
        expenseList.appendChild(listItem);

        let totalExpenses = parseFloat(localStorage.getItem("totalExpenses")) || 0;
        totalExpenses += amount;
        localStorage.setItem("totalExpenses", totalExpenses);

        let salary = parseFloat(localStorage.getItem("salary")) || 0;
        let remainingBalance = salary - totalExpenses;
        document.getElementById("remainingBalance").innerText = remainingBalance;

        // Clear input fields after adding the expense
        document.getElementById("newExpenseName").value = "";
        document.getElementById("newExpenseAmount").value = "";
    }
}


function goToChart() {
    let expenses = [];
    document.querySelectorAll("#expenseList li").forEach(item => {
        expenses.push({
            name: item.getAttribute("data-name"),
            amount: parseFloat(item.getAttribute("data-amount"))
        });
    });

    localStorage.setItem("expenseData", JSON.stringify(expenses));
    location.href = "chart.html";
}

function loadChartPage() {
    let ctx = document.getElementById("expenseChart").getContext("2d");
    let expenses = JSON.parse(localStorage.getItem("expenseData")) || [];
    let salary = parseFloat(localStorage.getItem("salary")) || 0;
    let totalExpenses = parseFloat(localStorage.getItem("totalExpenses")) || 0;
    let savings = salary - totalExpenses;

    let labels = expenses.map(exp => exp.name);
    let values = expenses.map(exp => exp.amount);
    
    labels.push("Savings");
    values.push(savings > 0 ? savings.toFixed(2) : 0);

    if (window.myChart) {
        window.myChart.destroy();
    }

    window.myChart = new Chart(ctx, {
        type: "pie",
        data: {
            labels: labels,
            datasets: [{
                data: values,
                backgroundColor: ["#F44336", "#4CAF50", "#FFC107", "#2196F3", "#9C27B0"]
            }]
        },
        options: { responsive: true }
    });
}

function goBack() {
    location.href = "budget.html";
}
